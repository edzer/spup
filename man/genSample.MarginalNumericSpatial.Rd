% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genSample.MarginalNumericSpatial.R
\name{genSample.MarginalNumericSpatial}
\alias{genSample.MarginalNumericSpatial}
\title{Generating Monte Carlo sample from an uncertain object of a class 
'MarginalNumericSpatial'}
\usage{
genSample(UMobject, n, samplemethod, p = 0, ...)
}
\arguments{
\item{UMobject}{uncertain object defined using defineUM().}

\item{n}{Integer. Number of Monte Carlo realizations.}

\item{samplemethod}{"ugs" for spatially correlated errors, "randomSampling" and
"stratifiedSampling" if no spatial correlation of errors is
considered.}

\item{p}{A vector of quantiles. Optional. Only required if sample method is
"stratifiedSampling" or "lhs".}

\item{...}{Additional parameters that may be passed, e.g. in
the "ugs" method. See examples.}

\item{var}{Logical. Specifies if variance for X realizations should be also returned.}
}
\value{
A Monte Carlo sample of uncertain input of a class of distribution
parameters.
}
\description{
Function that runs Monte Carlo simulations depending on the type of
uncertain object. Facilitates unconditional gausian simulation of errors for
spatially auto-correlated residulas, and random sampling, stratified
sampling if no spatial auto-correlation is included.
}
\details{
\strong{"ugs"} Unconditional gaussian simulation of spatially
auto-correlated errors.

\strong{"stratifiedSampling"} Number of samples (n) must be dividable by the
number of quantiles to assure each quantile is evenly represented.

\strong{"lhs"} Sampling method for at least two uncertain inputs. The
uncertain.object is then a list of two or more. It uses startified sampling
method to generate the inputs for the latin hypercude algorithm, hence the p
is restricted as above.
}
\examples{

# load data
data(DEM)

# "ugs" method example
dem_crm <- makecrm(acf0 = 0.78, range = 321, model = "Exp")
demUM <- defineUM(uncertain = TRUE, distribution = "norm", 
                   distr_param = c(dem30m, dem30m_sd), crm = dem_crm)
dem_sample <- genSample(UMobject = demUM, n = 5, samplemethod = "ugs", nmax = 20, asList = F)
str(dem_sample)

# "randomSampling" method example
demUM <- defineUM(uncertain = TRUE, distribution = "norm", distr_param = c(dem30m, dem30m_sd))
dem_sample <- genSample(UMobject = demUM, n = 5, samplemethod = "randomSampling",asList=F)
str(dem_sample)

demUM <- defineUM(uncertain = TRUE, distribution = "beta", distr_param = c(dem30m, dem30m_sd, dem30m))
dem_sample <- genSample(UMobject = demUM, n = 5, samplemethod = "randomSampling")
str(dem_sample)

# "startifiedSampling" method example
demUM <- defineUM(uncertain = TRUE, distribution = "norm", distr_param = c(dem30m, dem30m_sd))
dem_sample <- genSample(UMobject = demUM, n = 5, samplemethod = "stratifiedSampling", p = 0:5/5)
str(dem_sample)

demUM <- defineUM(uncertain = TRUE, distribution = "exp", distr_param = c(dem30m), lower.tail = FALSE)
dem_sample <- genSample(UMobject = demUM, n = 5, samplemethod = "stratifiedSampling", p = 0:5/5)
str(dem_sample)

# Examples with rasters
# load data
data(dummyraster)

# random sampling
rastUM <- defineUM(uncertain = TRUE, distribution = "norm", distr_param = c(rast_mean, rast_sd))
rast_sample <- genSample(UMobject = rastUM, n = 5, samplemethod = "randomSampling", asList=F)
str(rast_sample)
class(rast_sample)

# stratified sampling
rastUM <- defineUM(uncertain = TRUE, distribution = "norm", distr_param = c(rast_mean, rast_sd))
rast_sample <- genSample(UMobject = rastUM, n = 5, samplemethod = "stratifiedSampling", p = 0:5/5)
str(rast_sample)
class(rast_sample)

# ugs (raster with auto-correlation)
rast_crm <- makecrm(acf0 = 0.6, range = 6, model = "Sph")
rastUM <- defineUM(uncertain = TRUE, distribution = "norm", distr_param = c(rast_mean, rast_sd),
crm = rast_crm)
rast_sample <- genSample(UMobject = rastUM, n = 5, samplemethod = "ugs")
str(rast_sample)
class(rast_sample)


}
\author{
Kasia Sawicka, Stefan van Dam, Gerard Heuvelink
}

